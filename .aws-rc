aws_profile() {
  if [ $# -eq 0 ]; then
    echo "$AWS_PROFILE"
  else
    export AWS_PROFILE="$1"
  fi
}
export -f aws_profile
defn awp aws_profile

defn ec2 aws ec2
defn ecr aws ecr
defn s3 aws s3

aws_help() {
  aws "$@" help
}
export -f aws_help
defn ah aws_help

defn asl aws s3 ls
defn aslh aws s3 ls --human-readable
defn ash aws s3 ls --human-readable
defn aslr aws s3 ls --recursive
defn alr aws s3 ls --recursive
defn alrh aws s3 ls --recursive --human-readable
defn asy aws s3 sync
defn asn aws s3 sync --dryrun
alias asi="aws s3 sync --exclude '*' --include"
alias asni="aws s3 sync --dryrun --exclude '*' --include"

aws_ecr_list() {
  aws ecr describe-images --repository-name "$@"
}
export -f aws_ecr_list
defn ael aws_ecr_list

aws_ecr_list_n() {
  n="$1"; shift
  aws ecr describe-images --repository-name "$@" \
  | jq "
    .imageDetails |
    map(select(has(\"imageTags\"))) |
    sort_by(.imagePushedAt) |
    .[-$n:] |
    map({imageDigest,imageTags,imageSizeInBytes,imagePushedAt}) |
    map(.imagePushedAt |= todate)
  "
}
export -f aws_ecr_list_n
defn aen aws_ecr_list_n
defn ae5 aws_ecr_list_n 5
defn ae10 aws_ecr_list_n 10

policy_name_to_arn() {
  aws iam list-policies | jq -r ".Policies[]|select(.PolicyName | contains(\"$1\"))|.Arn"
}
defn pnta policy_name_to_arn

pipelines() {
  aws codepipeline list-pipelines \
  | jq '
    .pipelines
    | map(
      .created |= todate |
      .updated |= todate
    )
  '
}
export -f pipelines

defn jobs aws batch describe-jobs --jobs

check_buckets() {
  git grep 's3://' \
  | perl -ne 'print if s/.*(s3:\/\/[\w\-]+).*/\1/' \
  | sort \
  | uniq \
  | parallel 'aws s3 ls {} &>/dev/null && echo "Success: {}" || echo "Failure: {}"'
}

ec2_state() {
    aws ec2 describe-instances --instance-ids "$@" | jq '.Reservations[] | .Instances[] | .State'
}
export -f ec2_state
