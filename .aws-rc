aws_profile() {
  if [ $# -eq 0 ]; then
    echo "$AWS_PROFILE"
  else
    export AWS_PROFILE="$1"
  fi
}
export -f aws_profile
defn awp aws_profile
aws_unset_profile() {
  unset AWS_PROFILE
}
export -f aws_unset_profile
defn awup aws_unset_profile
defn awus aws_unset_profile

defn ec2 aws ec2
defn ecr aws ecr
defn aed aws ec2 describe-instances
defn aedi aws ec2 describe-instances --instance-ids
defn aesi aws ec2 start-instances --instance-ids
defn aepi aws ec2 stop-instances --instance-ids
defn aeti aws ec2 terminate-instances --instance-ids
defn ecrc aws ecr create-repository --repository-name
defn ecrd aws ecr delete-repository --repository-name
defn s3 aws s3

aws_help() {
  aws "$@" help
}
export -f aws_help
defn ah aws_help

defn asl aws s3 ls
defn aslh aws s3 ls --human-readable
defn ash aws s3 ls --human-readable
defn aslr aws s3 ls --recursive
aws_s3_ls_recursive() {
    flags=()
    urls=()
    for arg in "$@"; do
        if [ "${arg:0:1}" == "-" ]; then
            flags+=("$arg")
        else
            urls+=("$arg")
        fi
    done
    if which parallel &>/dev/null; then
        parallel aws s3 ls --recursive "${flags[@]}" ::: "${urls[@]}"
    else
        for url in "${urls[@]}"; do
            aws s3 ls --recursive "${flags[@]}" "$arg"
            rv=$?
            if [ $rv -ne 0 ]; then
                return $rv
            fi
        done
    fi
}
export -f aws_s3_ls_recursive
defn alr aws_s3_ls_recursive
defn alrh aws s3 ls --recursive --human-readable

s3_content_type() {
    if [ $# -ne 2 ]; then
        echo "Usage: $0 [s3://]<bkt>/<key> <content-type>" >&2
        return 1
    fi
    url="$1"; shift
    content_type="$1"; shift
    url="${url#s3://}"
    bkt="${url%%/*}"
    key="${url#*/}"
    echo "bkt: $bkt, key: $key" >&2
    aws s3api copy-object --bucket "$bkt" --content-type "$content_type" \
        --copy-source "$bkt/$key" --key "$key" \
        --metadata-directive "REPLACE"
}
export -f s3_content_type
defn s3ct s3_content_type

instance() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 <instance id>" >&2
        return 1
    fi
    aws ec2 describe-instances --instance-ids "$1" \
        | jq .Reservations | singleton \
        | jq .Instances | singleton
}
export -f instance

instance_name() {
    instance "$@" | jq -r '.Tags[] | select(.Key == "Name") | .Value'
}
export -f instance_name
defn isn instance_name

instance_ami() {
    instance "$@" | jq -r .ImageId
}
export -f instance_ami
defn isa instance_ami

# Uses jq `singleton` helper from ../js
instance_security_groups() {
    instance "$@" \
    | jq .NetworkInterfaces | singleton \
    | jq .Groups
}
export -f instance_security_groups
defn isgs instance_security_groups

instance_security_group() {
    instance_security_groups "$@" | singleton
}
export -f instance_security_group
defn isg instance_security_group

instance_security_group_id() {
    instance_security_group "$@" | jq -r '.GroupId'
}
export -f instance_security_group_id
defn isgi instance_security_group_id

instance_security_group_name() {
    instance_security_group "$@" | jq -r '.GroupName'
}
export -f instance_security_group_name
defn isgn instance_security_group_name

defn arm aws s3 rm
defn armr aws s3 rm --recursive

aws_s3_cp() {
    if [ $# -eq 2 ]; then
        aws s3 cp "$@"
    elif [ $# -eq 1 ]; then
        src="$1"; shift
        dst="./$(basename "$src")"; shift
        cmd=(aws s3 cp "$src" "$dst")
        echo "${cmd[*]}" >&2
        "${cmd[@]}"
    elif [ $# -eq 0 ]; then
        echo "Usage: $0 <src> [...<src>] [dst=./]" >&2
        return 1
    else
        dst="${@:(-1)}"
        srcs=("${@:1:$(($#-1))}")
        for src in "${srcs[@]}"; do
            cmd=(aws s3 cp "$src" "$dst")
            echo "${cmd[*]}" >&2
            "${cmd[@]}"
        done
    fi
}
export -f aws_s3_cp
defn acp aws_s3_cp
defn s3c aws_s3_cp
defn s3cp aws_s3_cp

defn asc aws-s3-cat
defn asy aws s3 sync
defn asz aws s3 sync --size-only
defn asn aws s3 sync --dryrun
defn asnz aws s3 sync --dryrun --size-only
alias asx="aws s3 sync --exclude '*'"
alias aszx="aws s3 sync --size-only --exclude '*'"
alias asxn="aws s3 sync --exclude '*' --dryrun"
alias asnx="aws s3 sync --dryrun --exclude '*'"
alias asnzx="aws s3 sync --dryrun --size-only --exclude '*'"
alias asi="aws s3 sync --exclude '*' --include"
alias asin="aws s3 sync --dryrun --exclude '*' --include"
alias asni="aws s3 sync --dryrun --exclude '*' --include"
alias asnzi="aws s3 sync --dryrun --size-only --exclude '*' --include"
alias aszi="aws s3 sync --size-only --exclude '*' --include"

aws_ecr_list() {
  aws ecr describe-images --repository-name "$@"
}
export -f aws_ecr_list
defn ael aws_ecr_list

aws_ecr_list_n() {
  n="$1"; shift
  aws ecr describe-images --repository-name "$@" \
  | jq "
    .imageDetails |
    map(select(has(\"imageTags\"))) |
    sort_by(.imagePushedAt) |
    .[-$n:] |
    map({imageDigest,imageTags,imageSizeInBytes,imagePushedAt}) |
    map(.imagePushedAt |= todate)
  "
}
export -f aws_ecr_list_n
defn aen aws_ecr_list_n
defn ae5 aws_ecr_list_n 5
defn ae10 aws_ecr_list_n 10

defn els ecr-layer-sizes.py
defn elsh ecr-layer-sizes.py -h

policy_name_to_arn() {
  aws iam list-policies | jq -r ".Policies[]|select(.PolicyName | contains(\"$1\"))|.Arn"
}
defn pnta policy_name_to_arn

pipelines() {
  aws codepipeline list-pipelines \
  | jq '
    .pipelines
    | map(
      .created |= todate |
      .updated |= todate
    )
  '
}
export -f pipelines

defn jobs aws batch describe-jobs --jobs

check_buckets() {
  git grep 's3://' \
  | perl -ne 'print if s/.*(s3:\/\/[\w\-]+).*/\1/' \
  | sort \
  | uniq \
  | parallel 'aws s3 ls {} &>/dev/null && echo "Success: {}" || echo "Failure: {}"'
}

ec2_instances() {
    if [ $# -gt 0 ]; then
        args=(--instance-ids)
        args+=("$@")
    else
        args=()
    fi
    aws ec2 describe-instances "${args[@]}" \
    | jq '
        [
            .Reservations[] | .Instances |
                map({
                    Name: (.Tags[] | select(.Key == "Name") | .Value),
                    InstanceId,
                    PublicDnsName,
                    InstanceType,
                    KeyName,
                    State: .State.Name
                })
            []
        ] |
        map(with_entries(select(.value != "")))
    '
}
export -f ec2_instances
defn aei ec2_instances
ec2_instances_running() {
    ec2_instances "$@" | jq 'map(select(.State == "running"))'
}
export -f ec2_instances_running
defn aeir ec2_instances_running
defn ecl ec2_instances
defn e2l ec2_instances

ec2_dnsname() {
    ec2_instances "$@" | jq -rs '.[-1][0].PublicDnsName'
}
export -f ec2_dnsname
defn edn ec2_dnsname

ec2_ssh_hostname() {
    if [ $# -ne 1 ] && [ $# -ne 2 ]; then
        echo "Usage: ec2_ssh_hostname <instance id> [basename (under ~/.ssh/include/)]" >&2
        return 1
    fi
    local instance="$1"; shift
    if [ $# -gt 0 ]; then
        local basename="$1"; shift
    else
        local basename="$instance"
    fi
    local hostname="$(ec2_dnsname "$instance")"
    local ssh_include_dir="$HOME/.ssh/include"
    mkdir -p "$ssh_include_dir"
    hostname_path="$ssh_include_dir/$basename"
    echo "HostName $hostname" | tee "$hostname_path"
}
export -f ec2_ssh_hostname
defn esh ec2_ssh_hostname

ec2_state() {
    aws ec2 describe-instances --instance-ids "$@" | jq '.Reservations[] | .Instances[] | .State'
}
export -f ec2_state
defn e2s ec2_state

watch_ec2_state() {
    watch ec2_state "$@"
}
export -f watch_ec2_state

wait_ec2_state() {
    watch ec2_state "$@"
}
export -f wait_ec2_state
defn wes wait_ec2_state

check_pipeline_execution() {
    usage="get_pipeline_execution [[pipeline_name=\$pipeline_name] pipeline_execution_id=\$pipeline_execution_id]"
    if [ $# -lt 2 ]; then
        if [ -z "$pipeline_name" ]; then
            echo "$usage" >&2
            return 11
        fi
        if [ $# -lt 1 ]; then
            if [ -z "$pipeline_execution_id" ]; then
                echo "$usage" >&2
                return 12
            fi
        else
            pipeline_execution_id="$1"; shift
        fi
    elif [ $# -eq 2 ]; then
        pipeline_name="$1"; shift
        pipeline_execution_id="$1"; shift
    else
        echo "$usage" >&2
        return 13
    fi
    local pipeline_execution="$(aws codepipeline get-pipeline-execution --pipeline-name "$pipeline_name" --pipeline-execution-id "$pipeline_execution_id" | jq .pipelineExecution)"
    echo "$pipeline_execution"
    local status="$(echo "$pipeline_execution" | jq -r .status)"
    if [ "$status" == "InProgress" ]; then
        return 0
    else
        echo 'done!'
        return 1
    fi
}
export -f check_pipeline_execution
defn cpe check_pipeline_execution

start_and_poll_pipeline() {
    if [ $# -eq 0 ]; then
        if [ -z "$pipeline_name" ]; then
            echo "$usage" >&2
            return 11
        fi
    elif [ $# -eq 1 ]; then
        pipeline_name="$1"; shift
    else
        echo "$usage" >&2
        return 12
    fi
    export pipeline_name
    export pipeline_execution_id="$(aws codepipeline start-pipeline-execution --name "$pipeline_name" | tee >(cat >&2) | jq -r '.pipelineExecutionId')"
    sleep 1
    watch -n5 -e check_pipeline_execution
}
export -f start_and_poll_pipeline
defn sapp start_and_poll_pipeline

if which aws_completer &>/dev/null; then
    complete -C "$(which aws_completer)" aws
fi

## Public S3 bucket helpers
# aws s3 mb s3://$bkt
# aws s3api put-bucket-policy --bucket $bkt --policy "$(cat public-bucket-policy.json)"
#
# aws s3api put-bucket-acl --bucket $bkt --acl public-read
# aws s3api put-bucket-website --bucket $bkt --website-configuration file://website.json

aws_make_bucket() {
    last="${@:(($#))}"
    set -- "${@:1:$(($#-1))}"
    if [ "${last#s3://}" == "$last" ]; then
        last="s3://$last"
    fi
    aws s3 mb "$@" "$last"
}
export -f aws_make_bucket
defn amb aws_make_bucket

aws_make_objects_public() {
    for arg in "$@"; do
        suffix="${arg#s3://}"
        bkt="${suffix%%/*}"
        key="${suffix#*/}"
        cmd=(aws s3api put-object-acl --bucket "$bkt" --key "$key" --acl public-read)
        echo "${cmd[*]}" >&2
        "${cmd[@]}"
    done
}
export -f aws_make_objects_public
defn amop aws_make_objects_public
defn apo aws_make_objects_public

aws_get_object_acl() {
    for arg in "$@"; do
        suffix="${arg#s3://}"
        bkt="${suffix%%/*}"
        key="${suffix#*/}"
        cmd=(aws s3api get-object-acl --bucket "$bkt" --key "$key")
        echo "${cmd[*]}" >&2
        "${cmd[@]}"
    done
}
export -f aws_get_object_acl
defn agoa aws_get_object_acl

aws_get_bucket_policy() {
    aws s3api get-bucket-policy --bucket "$1" | jq -r .Policy | jq
}
export -f aws_get_bucket_policy
defn agbp aws_get_bucket_policy

defn agbc aws s3api get-bucket-cors --bucket
aws_put_bucket_cors() {
    bkt="$1"; shift
    if [ $# -eq 0 ]; then
        cors_config='{"CORSRules":[{"AllowedHeaders":["Authorization"],"AllowedMethods":["GET","HEAD"],"AllowedOrigins":["*"],"ExposeHeaders":["Access-Control-Allow-Origin"]}]}'
    else
        cors_config="$1"; shift
    fi
    aws s3api put-bucket-cors --bucket "$bkt" --cors-configuration "$cors_config" "$@"
}
export -f aws_put_bucket_cors
defn apbc aws_put_bucket_cors

aws_make_bucket_public() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 <bkt>" >&2
        return 1
    fi
    b="$1"; shift

    public_access_cmd=(aws s3api put-public-access-block --bucket $b --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false")
    echo "Running: ${public_access_cmd[*]}" >&2
    "${public_access_cmd[@]}"

    policy_cmd=(aws s3api put-bucket-policy --bucket $b --policy "{\"Id\":\"s3://$b-public\",\"Statement\":[{\"Sid\":\"s3://$b-public\",\"Action\":[\"s3:GetObject\"],\"Effect\":\"Allow\",\"Resource\":\"arn:aws:s3:::$b/*\",\"Principal\":{\"AWS\":[\"*\"]}}]}")
    echo "Running: ${policy_cmd[*]}" >&2
    "${policy_cmd[@]}"

    # See also:
    # - aws s3api put-bucket-website --bucket $bkt --website-configuration file://website.json
    # - aws s3api put-bucket-acl --bucket $b --acl public-read
}
export -f aws_make_bucket_public
defn ambp aws_make_bucket_public

pipeline_executions() {
    if [ $# -ne 1 ]; then
        echo "Usage: pipeline_executions <pipeline name>" >&2
    fi
    aws codepipeline list-pipeline-executions --pipeline-name "$1" \
    | jq \
        ' .pipelineExecutionSummaries
        | map(.startTime |= todate)
        | map(.lastUpdateTime |= todate)
        '
}
export -f pipeline_executions
defn pes pipeline_executions

defn cdb codebuild.py
defn cbp codebuild.py projects -v
defn cbpl codebuild.py projects list
defn cbplv codebuild.py projects list -v
defn cbb codebuild.py builds
defn cbbl codebuild.py builds latest
defn cbblv codebuild.py builds latest -v
defn cbbls codebuild.py builds list
defn cbblsv codebuild.py builds list -v
defn cbblsvv codebuild.py builds list -vv
defn cbbg codebuild.py builds logs

defn cpl codepipeline.py list
defn cplv codepipeline.py list -v
defn cpel codepipeline.py executions list
defn cpelv codepipeline.py executions list -v
defn cpelvh codepipeline.py executions list -vn10
defn cpelvv codepipeline.py executions list -vv
defn cpelvv1 codepipeline.py executions list -vvn1

defn ed2t ecr-digest-to-tags

defn tfn terraform
defn tfa terraform apply
defn tfd terraform destroy
defn tfi terraform init
defn tfp terraform plan
defn tfpo terraform plan -o

defn awai aws sts get-caller-identity
defn agci aws sts get-caller-identity
aws_account() {
    aws sts get-caller-identity | jq -r .Account
}
export -f aws_account
defn awa aws_account
defn aws_region aws configure get region
defn awr aws configure get region

ami() {
    if [ $# -eq 1 ]; then
        ami_id="$1"; shift
        aws ec2 describe-images --image-ids "$ami_id" | jq '.Images[0]'
    else
        aws ec2 describe-images --image-ids "$@"
    fi
}
export -f ami

amin() {
    ami "$@" | jq -r .Name
}
export -f amin

amibdm() {
    if [ $# -eq 1 ]; then
        ami "$@" | jq .BlockDeviceMappings
    else
        ami "$@" | jq '.Images[] | {ImageId, BlockDeviceMappings}'
    fi
}
export -f amibdm

ami_filter() {
    if [ $# -ne 2 ]; then
        echo "Usage: $0 <Name> <Values>" >&2
        return 1
    fi
    Name="$1"; shift
    Values="$1"; shift
    aws ec2 describe-images --filter "Name=$Name,Values=$Values"
}
export -f ami_filter
defn amif ami_filter

ami_name_to_id() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 <Name>" >&2
        return 1
    fi
    name="$1"; shift
    ami_filter name "$name" | jq -r '.Images[].ImageId'
}
export -f ami_name_to_id
defn amin2i ami_name_to_id

defn ads aws cloudformation describe-stacks
aws_stack_names() {
    aws cloudformation describe-stacks | jq -r '.Stacks[].StackName'
}
export -f aws_stack_names
defn adsn aws_stack_names

defn ab aws batch
defn abjq aws batch describe-job-queues
aws_batch_job_queue_names() {
    aws batch describe-job-queues "$@" | jq -r '.jobQueues[].jobQueueName'
}
export -f aws_batch_job_queue_names
defn abjqn aws_batch_job_queue_names

defn abjd aws batch describe-job-definitions
defn abjda aws batch describe-job-definitions --status ACTIVE
aws_batch_job_definition_names() {
    aws batch describe-job-definitions "$@" | jq -r '.jobDefinitions[].jobDefinitionName'
}
export -f aws_batch_job_definition_names
defn abjdn aws_batch_job_definition_names
defn abjdan aws_batch_job_definition_names --status ACTIVE

defn abj aws batch list-jobs --job-queue

defn ecs aws ecs

ecs_list_clusters() {
    aws ecs list-clusters | jq -r '.clusterArns[]'
}
export -f ecs_list_clusters
defn ecslc ecs_list_clusters

ecs_running_clusters() {
    local ecs_clusters="$(aws ecs list-clusters | jr '.clusterArns[]')"
    # echo $ecs_clusters
    aws ecs describe-clusters --cluster $ecs_clusters | \
    jq '.clusters[]|{clusterName,registeredContainerInstancesCount}|select(.registeredContainerInstancesCount > 0)'
}
export -f ecs_running_clusters
defn ecsrc ecs_running_clusters

ecs_list_container_instances() {
    aws ecs list-container-instances --cluster "$@" | jq -r '.containerInstanceArns[]'
}
export -f ecs_list_container_instances
defn ecslci ecs_list_container_instances

ecs_describe_container_instances() {
    local prefix="${1%%/*}"
    prefix="${prefix%:container-instance}:cluster"
    local cluster="${1%/*}"
    cluster="$prefix/${cluster#*/}"
    echo "cluster: $cluster" >&2
    aws ecs describe-container-instances --cluster "$cluster" --container-instances "$@"
}
export -f ecs_describe_container_instances
defn ecsdci ecs_describe_container_instances
